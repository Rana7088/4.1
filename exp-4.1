Exp-4.1

<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<title>Employee Management System</title>
<style>
body {
background-color: black;
color: white;
font-family: monospace;
padding: 20px;
}
#terminal {
background: black;
padding: 15px;
border: 2px solid #444;
white-space: pre-wrap;
min-height: 400px;
}
input {
background: black;
color: white;
border: none;
outline: none;
font-family: monospace;
font-size: 16px;
width: 100%;
}
</style>
</head>
<body>
<div id="terminal"></div>
<input id="userInput" type="text" autofocus placeholder="Enter your choice here..." />

<script>
let employees = [
{ name: "Alice", id: "E101" },
{ name: "Bob", id: "E102" },
{ name: "Charlie", id: "E103" }
];

const terminal = document.getElementById("terminal");
const userInput = document.getElementById("userInput");

function print(text, newLine = true) {
terminal.textContent += text + (newLine ? "\n" : "");
terminal.scrollTop = terminal.scrollHeight;
}

function showMenu() {
print("\nEmployee Management System");
print("1. Add Employee");
print("2. List Employees");
print("3. Remove Employee");
print("4. Exit\n");
print("Enter your choice: ", false); // <-- no line break
}

let step = "menu";
let tempName = "";

showMenu();

userInput.addEventListener("keydown", function(e) {
if (e.key === "Enter") {
let value = userInput.value.trim();
userInput.value = "";

if (step === "menu") {
print(value);  // print on same line as choice
if (value === "1") {
print("Enter employee name: ", false);
step = "addName";
} else if (value === "2") {
print("\nEmployee List:");
employees.forEach((emp, i) => {
print(`${i + 1}. Name: ${emp.name}, ID: ${emp.id}`);
});
showMenu();
} else if (value === "3") {
print("Enter employee ID to remove: ", false);
step = "remove";
} else if (value === "4") {
print("Exiting...");
userInput.disabled = true;
} else {
print("Invalid choice. Try again.");
showMenu();
}
} 
else if (step === "addName") {
tempName = value;
print(value);
print("Enter employee ID: ", false);
step = "addID";
} 
else if (step === "addID") {
employees.push({ name: tempName, id: value });
print(value);
print(`Employee ${tempName} (ID: ${value}) added successfully.`);
step = "menu";
showMenu();
} 
else if (step === "remove") {
print(value);
const index = employees.findIndex(emp => emp.id === value);
if (index !== -1) {
const removed = employees.splice(index, 1)[0];
print(`Employee ${removed.name} (ID: ${removed.id}) removed successfully.`);
} else {
print("Employee not found.");
}
step = "menu";
showMenu();
}
}
});
</script>
</body>
</html>


Exp-4.2

const express = require("express");
const app = express();
app.use(express.json());
let cards = [
{ id: 1, suit: "Hearts", value: "Ace" },
{ id: 2, suit: "Spades", value: "King" },
{ id: 3, suit: "Diamonds", value: "Queen" }
];
app.get("/cards", (req, res) => {
res.status(200).json(cards);
});
app.get("/cards/:id", (req, res) => {
const card = cards.find(c => c.id === parseInt(req.params.id));
if (!card) {
return res.status(404).json({ message: "Card not found" });
}
res.status(200).json(card);
});
app.post("/cards", (req, res) => {
const newCard = {
id: cards.length + 1,
suit: req.body.suit,
value: req.body.value
};
cards.push(newCard);
res.status(201).json(newCard);
});
app.delete("/cards/:id", (req, res) => {
const cardIndex = cards.findIndex(c => c.id === parseInt(req.params.id));
if (cardIndex === -1) {
return res.status(404).json({ message: "Card not found" });
}
const removedCard = cards.splice(cardIndex, 1)[0];
res.status(200).json({
message: `Card with ID ${removedCard.id} removed`,
card: removedCard
});
});
const PORT = 3000;
app.listen(PORT, () => console.log(`Server running on http://localhost:${PORT}`));

exp-4.3
const express = require('express');
const app = express();
const port = 3000;
app.use(express.json());
let seats = {
"1": { status: "available" },
"2": { status: "available" },
"3": { status: "available" },
"4": { status: "available" },
"5": { status: "available" }
};
const lockedSeats = {};
const LOCK_TIMEOUT = 60 * 1000;
function cleanupExpiredLocks() {
const now = Date.now();
for (const seatId in lockedSeats) {
if (lockedSeats[seatId].expiresAt < now) {
if (seats[seatId] && seats[seatId].status === "locked") {
seats[seatId].status = "available";
}
delete lockedSeats[seatId];
}
}
}
setInterval(cleanupExpiredLocks, 30000);
app.get('/seats', (req, res) => {
cleanupExpiredLocks();
res.status(200).json(seats);
});
app.post('/lock/:seatId', (req, res) => {
if (!seats[seatId]) {
return res.status(404).json({ message: `Seat ${seatId} not found` });
}
if (seats[seatId].status === "booked") {
return res.status(400).json({ message: `Seat ${seatId} is already booked` });
}
if (seats[seatId].status === "locked") {
if (lockedSeats[seatId] && lockedSeats[seatId].expiresAt > Date.now()) {
return res.status(400).json({ message: `Seat ${seatId} is already locked` });
} else {
delete lockedSeats[seatId];
}
}
seats[seatId].status = "locked";
const expiresAt = Date.now() + LOCK_TIMEOUT;
lockedSeats[seatId] = { expiresAt };
res.status(200).json({ 
message: `Seat ${seatId} locked successfully. Confirm within 1 minute.` 
});
});
app.post('/confirm/:seatId', (req, res) => {
const seatId = req.params.seatId;

// Check if seat exists
if (!seats[seatId]) {
return res.status(404).json({ message: `Seat ${seatId} not found` });
}
if (seats[seatId].status === "booked") {
return res.status(400).json({ message: `Seat ${seatId} is already booked` });
}
if (seats[seatId].status !== "locked") {
return res.status(400).json({ message: "Seat is not locked and cannot be booked" });
}
if (!lockedSeats[seatId] || lockedSeats[seatId].expiresAt <= Date.now()) {
seats[seatId].status = "available";
if (lockedSeats[seatId]) {
delete lockedSeats[seatId];
}
return res.status(400).json({ message: "Seat lock has expired. Please try again." });
}
seats[seatId].status = "booked";
delete lockedSeats[seatId];
res.status(200).json({ 
message: `Seat ${seatId} booked successfully!` 
});
});
app.listen(port, () => {
console.log(`Ticket booking system running on http://localhost:${port}`);
});
module.exports = app;
